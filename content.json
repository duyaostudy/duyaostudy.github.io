{"posts":[{"title":"新冠冤种","text":"2022.12.21/周三/第一天温度：38 症状：头疼、微咳嗽 睡了一天 2022.12.22/周四/第二天温度：36 症状： 咳嗽、卡痰、脑子灌铅 7:30流鼻血 2:40流鼻血 2022.12.23/周五/第三天温度：36 症状：咳嗽（中度）、卡痰，四肢无力，犯困 2022.12.24/周六/第四天温度：36 症状：咳嗽、卡痰，犯困 2022.12.24/周六/第四天温度：36 症状：咳嗽、有痰","link":"/2022/12/25/covid-record/"},{"title":"hello world","text":"IceBlog 2022/22/15 没啥写的 少年游 祝你考研上岸","link":"/2022/12/15/hello-wrod/"},{"title":"hexo + github搭建个人博客","text":"前置需要 git node.js -v16.15.1 github下一个username.github.io仓库 git下载windows: git node.js官方平台安装：Node.js 版本仅供参考 搭建流程hexo官方文档 官方文档 | Hexo 安装hexo 使用npm安装hexo 1$ npm install -g hexo-cli 初始化hexo 在你创建的文档里 12$ hexo init &lt;folder&gt;$ npm install folder 为生成在那个文档路径下，默认为当前文档 生成的文档结构 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml文件 主要配置文件，网站的大部分配置参数在此设置 source 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 source/_posts 存放post布局格式的笔记，存入.md格式的文件，hexo会根据hexo生成静态界面，可在scaffolds/文档下修改格式文件 _config.yml 配置属性只列举经常一些初始的，其他看官方文档 title: 网站标题subtitle: 网站副标题description: 描述keywords: 网站关键字author: 你的名字language: 使用的语言timezone: 时区 url: http://username.github.io url改为你的github名称地址，如果有子目录在地址后添加子目录名称 theme: 主题名 生成部署generate 1$ hexo generate 生成静态文件，可以简写为 1$ hexo g server 1$ hexo server 启动本地服务器查看效果 默认为4000端口 简写 1$ hexo s deploy一键部署 部署网站安装插件 1$ npm install hexo-deployer-git --save 使用前请配置自己的git 在config.yml下添加 12345deploy: type: git repo: git库的名称 #https://github.com/username/username.github.io branch: 要上传的分支名称 message: 自定义提交信息 生成站点文件并推送至远程库执行 hexo clean &amp;&amp; hexo deploy push部署 可以将生成文件下的public文件直接push到自己仓库，也可以访问 访问https://username.github.io就可以查看自己的blog了 主题 可以到hexo官网主题商店找到自己喜好的主题，相关配置可在主题页中找到 个人使用主题：icarus 常见问题 github网络问题导致push不到仓库 搭建建议 在github上创建hexo分支设为默认分支，用于存放hexo相关的源代码 可在别处拉取代码更新自己的blog main分支用于存放生成后public资源","link":"/2022/12/16/hexo-github/"},{"title":"KMP算法","text":"一个高效经典的字符串匹配算法，使用空间换时间的方式，目的, 对于模式串 t， 找到它在目标串 s 中第一个出现的位置。例如 t = “abcab”, s = “ababcabd”, 算法就应该返回 2为他第一次出现的位置。 传入参数 123456/*** 传入char字符作为测试* @param s 目标字符串* @param t 模式字符串* @return*/ 暴力匹配1234567891011121314public int search(String s, String t){ int j; for(int i = 0; i &lt;= s.length() - t.length(); i++){ for(j = 0; j &lt; t.length(); j++){ if(s.charAt(i + j) != t.charAt(j)){ break; } } if(j == t.length()){ return i; } } return -1; } 对于暴力匹配，如果s中未出现匹配的字符串，则它需要同时回退s和t的指针，对之前已经匹配过的字符重新进行匹配，嵌套 for 循环，时间复杂度 O(MN)，空间复杂度O(1) Kmp算法核心：部分匹配表(Partial Match Table) 字符串前缀与后缀的交集中最长元素的长度，称为PMT表。 最大公共前后缀： 以abcab例：他的前缀为{a,ab,abc,abca}; 后缀为{b,ab,cab,bcab}。则他们的最大公共前后缀为：ab 对于字符串 t: abcababc，他的PMT如下表表示 char: a b c a b a b c index: 0 1 2 3 4 5 6 7 value: 0 0 0 1 2 1 2 3 模式字符串长度为8，PMT就会有8个值 PMT的值：例如 index = 4 字符串为 abcab，最大公共前后缀为 ab，长度为2，所以 value = 2。index = 7，最大公共前后缀为 abc,长度为3，value = 3，PMT表中的值就可以按这样获得 如何使用PMT表来实现字符串的匹配 首先，PMT表的值是根据模式串来进行获得的，以上表的字符串ｔ为例子。设模式串指针为 j，目标字符串指针为 i，将模式串和目标字符串的字符一个一个的匹配。根据 PMT 获得的Value值的性质可知，t[value] 之前的值与t[j - value]之后的字符都相等。 当遇见 i 与 j 相对应的字符不匹配时，当前 j = 5，回到上一个字符对应的 j = 4 的 Value = 2值可得，也就是令 j = 2。就有如下效果 这样就可以达到快速匹配的效果，我们还可以这样优化，因为每次取得 j 为上一次的的值，可以将next数组整体往右移一位，创建一个next数组，记录每一个value值与j，作为kmp的next数组来达到以上的效果。 char: a b c a b a b c index: 0 1 2 3 4 5 6 7 value: 0 0 0 1 2 1 2 3 next: -1 0 0 0 1 2 1 2 next数组 1234567891011public void getNext(int[] next, char[] chars){ int i = 0, t = -1; next[i] = t; while(i &lt; next.length){ if(t == -1 || chars[i] == chars[t]){ next[++i] = ++t; } else { t = next[t]; } }} 原理待说 kmp算法 12345678910111213141516public int searchKmp(String s, String t){ int slen = s.length(), tlen = t.length(), j = 0, i = 0; int[] next = getNext(t.toCharArray()); while(i &lt; slen || j &lt; tlen){ if(j == -1 || s.charAt(i) == t.charAt(j)){ i++; j++; }else{ j = next[j]; } } if(j == tlen){ return i - j; } return -1;} 例题：28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）","link":"/2022/12/20/kmp-md/"},{"title":"login","text":"单一服务模式 登录使用session对象实现 登录成功后，把用户数据放到session中 判断是否登录，从session中获取数据，可以获取到登录 具有局限性，只能在一台服务器上实现，单点性能压力大，无法扩展 单点登录模式 （SSO模式） session广播机制实现 session复制到其他模块中，实现登录机制 cookie + redis实现 登录后数据放入两个地方 cookie：redis生成的key放入cookie redis：key:生成唯一随机值，value:用户数据 实现原理 浏览器发送请求带着cookie进行发送，获取cookie,拿着cookie去redis根据key查询，查到数据登录 token实现 按照一定规程生成一个字符串，一般拥有用户信息 一般使用base64加密 生成字符串后将字符串返回 可以使用cookie和地址栏进行传输 JWT 工具自包含令牌 使用jwt规则生成字符串 JWT包含三部分 jwt头信息 描述jwt元数据的json对象 有效载荷 包含主体信息（用户信息） 签名哈希 防伪标志 判定是否由我们规则生成字符串","link":"/2022/12/25/login/"},{"title":"Mybatis","text":"MyBatis1. 搭建Mybaits1. maven包配置文件123456789101112131415161718&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.7&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 2. mybaits配置文件 xml配置文件 ```xml 12345678910111213141516171819202122232425262728293031323334353637### 3. 创建mapper接口&gt; myBatis中的mapper接口相当于dao，区别：mapper仅仅是接口，不需要提供实现类### 4. 创建myBatis映射文件1. 相关概念：ORM 对象关系映射 1. 对象：java实体类对象 2. 关系：关系型数据库 3. 映射：二者之间的对应关系2. | java概念 | 数据库概念 | | -------- | ---------- | | 类 | 表 | | 属性 | 字段\\列 | | 对象 | 记录\\行 | &gt; 1. 映射文件命名规则 &gt; &gt; 1. 表对应的实体类的类名+Mapper.xml &gt; 2. 一个映射文件对应一个实体类、一张表的操作 &gt; 3. MyBatis用于编写SQL、访问以及操作表中的数据 &gt; &gt; 2. 映射文件 &gt; &gt; 1. ```xml &gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &gt; &lt;!DOCTYPE mapper &gt; PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &gt; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &gt; &lt;!--namespace是接口--&gt; &gt; &lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt; &gt; &gt; &lt;/mapper&gt; > > 3. MyBatis面向接口编程的两个一致 > > 1. 映射文件要与mapper接口全类名一致 > 2. 映射文件sql的id要与mapper接口中的方法名一致 > 3. 表--实体类--mapper接口--映射文件 4.增删改查添加 mapper接口类 1234public interface UserMapper { int insertUser(User user);} xml映射文件 123&lt;insert id=&quot;insertUser&quot;&gt; insert into t_user values (null,'root', 'root', 23, '男', '123456@qq.com')&lt;/insert&gt; 启动类 12345678910111213//加载核心配置文件InputStream is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);//构建sqlSessionFactoryBuilderSqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();//获取sqlsession工厂对象SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(is);//获取数据库的会话对象,相当于javaweb session对象SqlSession sqlSession = sqlSessionFactory.openSession();//获取UserMapper对象 底层是代理模式UserMapper mapper = sqlSession.getMapper(UserMapper.class);int i = mapper.insertUser();//提交事务sqlSession.commit(); 优化： sqlSessionFactory.openSession(true); 默认提交事务 只需要修改maopper.xml文件即可 修改123&lt;update id=&quot;update&quot;&gt; update t_user set username='阿三' where id = 14&lt;/update&gt; 删除123&lt;delete id=&quot;delet&quot;&gt; delete from t_user where id = 16&lt;/delete&gt; 查询根据Id查询返回一个对象值 属性要添加一个返回值 resultType:设置结果返回默认映射关系，值为对象全类名 resultMap:设置自定义映射关系 123&lt;select id=&quot;queryId&quot; resultType=&quot;com.dy.spring.Po.User&quot;&gt; select * from t_user where id = 14&lt;/select&gt; 2. Mybatis核心配置文件说明（了解）1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;!-- 执行log4j日志--&gt; &lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt; &lt;/settings&gt; &lt;!-- environments配置连接数据库环境--&gt; &lt;!-- default：表示默认使用环境id id:表示连接数据环境唯一标识（不能重复） --&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt;&lt;!-- 设置事务管理方式 type值： JDBC:表是当前坏境中，执行SQL中使用的是原生事务管理方法，事务提交 MANAGED:将mybatis交由spring管理--&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt;&lt;!-- 数据库连接池 type:设置数据源类型 POLLED:使用数据库连接池缓存数据库连接 UNPOLLED:表示不使用数据库连接池 JNDI:表示使用上下文中的数据源--&gt; &lt;dataSource type=&quot;POOLED&quot;&gt;&lt;!-- 设置连接数据库的驱动--&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 引入映射文件--&gt; &lt;mappers&gt; &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 1. 引入数据库驱动属性文件jdbc.properties 1234prpo.driverClass=com.mysql.jdbc.Driverprpo.url=jdbc:mysql://localhost:3306/mybatisprpo.username=rootprpo.password=root 引入方式 1&lt;properties resource=&quot;jdbc.properties&quot;/&gt; 2. 设置类型别名123&lt;typeAliases&gt; &lt;typeAlias type=&quot;com.dy.spring.Po.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;&lt;/typeAliases&gt; 类型别名不区分大小写 不设置alias，别名默认是类名且不区分大小写 1&lt;package name=&quot;com.dy.spring.Po&quot;/&gt; 以包为单位，将包下所有的类型设置为默认的类型别名，不区分大小写 要求： mapper接口所在包名要与映射文件路径一致 mapper接口名要与映射文件名一致 3. Mybatis获取参数的两种方式${}与#{} ${}的本质是字符串拼接 字符串拼接时要加入’’号 #{}的本质是占位符赋值 1. 单个字面量赋值1234&lt;!-- User queryId(int id)--&gt;&lt;select id=&quot;queryId&quot; resultType=&quot;user&quot;&gt; select * from t_user where id=#{id};&lt;/select&gt; 单个变量时与名称无关，与参数传入顺序有关 2. 多个字面赋值1234&lt;!-- User checkLogin(String name, String password);--&gt;&lt;select id=&quot;checkLogin&quot; resultType=&quot;user&quot;&gt; select * from t_user where username=#{arg0} and password=#{arg1};&lt;/select&gt; Mybati会将多个参数放入一个map集合中，以arg0…或者param1…为键，传入参数为值 只需通过#{键}或者${键}方式来进行访问 3. map集合赋值1234&lt;!-- User checkLoginMap(Map&lt;String, Object&gt; map); --&gt; &lt;select id=&quot;checkLoginMap&quot; resultType=&quot;user&quot;&gt; select * from t_user where username=#{username} and password=#{password}; &lt;/select&gt; 也可以自己创建map传入参数 123Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();map.put(&quot;username&quot;,&quot;李四&quot;);map.put(&quot;password&quot;,&quot;root&quot;); map集合 4. 实体类型参数**1234&lt;!-- int insertUser(User user); --&gt;&lt;insert id=&quot;insertUser&quot;&gt; insert into t_user values(null,#{username},#{password},#{age},#{sex},#{email});&lt;/insert&gt; #{}里属性是根据类里的get和set方法去调用，name为去掉get与set首字母小写后的情况 5.命名参数**在方法参数前使用@Param注解 1234&lt;!-- User checkLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;&lt;select id=&quot;checkLoginByParam&quot; resultType=&quot;user&quot;&gt; select * from t_user where username=#{username} and password=#{password};&lt;/select&gt; @Param相当于将注解的值作为map集合里的键值 4. 查询功能 查询时，返回的结果为多个时，接口不能使用对象为返回值 查询返回一条数据时 List接受 实体类对象接受 map接受 查询返回多条数据时 通过实体类型的List类型接受 通过map类型的List集合接受 在接口方法上添加@MapKey(“”)注解，将每条数据转换为map集合作为值，注解的属性为键 1. 返回值为基本类型时1234&lt;!-- Integer selectCount() --&gt;&lt;select id=&quot;selectCount&quot; resultType=&quot;Integer&quot;&gt; select count(*) from t_user;&lt;/select&gt; Mybatis中设置了默认别名 java.lang.Integer –&gt; int,Integer int –&gt; _int, _integer（int设置了两个默认别名） 大部分为基础数据类型 2. map返回多个查询数值映射文件设置 1234&lt;!-- Map&lt;String, Object&gt; selectAll();--&gt;&lt;select id=&quot;selectAll&quot; resultType=&quot;map&quot;&gt; select * from t_user;&lt;/select&gt; 接口设置 12@MapKey(&quot;id&quot;)Map&lt;String, Object&gt; selectAll(); 返回多个查询结果和map 5. 特殊SQL 的执行1. 模糊查询2. 批量删除1234&lt;!--int deleteUsers(@Param(&quot;ids&quot;) String ids);--&gt;&lt;delete id=&quot;deleteUsers&quot;&gt; delete from t_user where id in(${ids});&lt;/delete&gt; 只能通过${}获取参数，#{}会自带’’符号 3. 动态设置表名根据表名返回数据 1234&lt;!-- List&lt;User&gt; getUserByTableName(@Param(&quot;tableName&quot;) String tableName); --&gt; &lt;select id=&quot;getUserByTableName&quot; resultType=&quot;User&quot;&gt; select * from ${tableName}; &lt;/select&gt; 4.设置自动递增1.keyProperty中对应的值是实体类的属性，而不是数据库的字段。2.添加该属性之后并非改变insert方法的返回值，也就是说，该方法还是返回新增的结果。而如果需要获取新增行的主键ID，直接使用传入的实体对象的主键对应属性的值。 123&lt;insert id=&quot;insertUser&quot; useGenertedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into t_user values (null,'root', 'root', 23, '男', '123456@qq.com')&lt;/insert&gt; 将id赋值在传入过来的对象里 useGenertedKeys=”true” 设置当前标签sql使用自增id keyProperty=”id” 键自增主键的值赋值给传输到映射文件中的值 6. Mybatis框架1. 解决字段名和属性不一致的情况SQL中的解决办法： 1select user_name name, id from t_user where id=? 通过空格为属性名起别名 Mybatis全局配置文件解决: 1234&lt;!-- 将mysql属性中的_自动映射为驼峰--&gt;&lt;settings&gt; &lt;setting name=&quot;mapUnderscoreToCamelCaseEnables&quot; value=&quot;true&quot;/&gt;&lt;/settings&gt; 例子：emp_name 映射为 emoName 字段名要与属性映射一致 2. 自定义映射关系123456789&lt;!--自定义映射关系--&gt; &lt;resultMap id=&quot;userResultMap&quot; type=&quot;User&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/id&gt; &lt;result property=&quot;username&quot; column=&quot;user_name&quot;&gt;&lt;/result&gt; &lt;result property=&quot;password&quot; column=&quot;password&quot;&gt;&lt;/result&gt; &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt; &lt;result property=&quot;sex&quot; column=&quot;sex&quot;&gt;&lt;/result&gt; &lt;/resultMap&gt; 夫标签： id：设置映射名 type：设置映射关系中的实体类型 子标签： id：主键映射关系 result：属性映射关系 property: 属性名，必须时type属性所设置的实体类型中的属性名 column：数据库字段名，必须时sql语句查询出的字段名 &lt;–to 动态sql语句–&gt;","link":"/2022/12/25/mybatis/"}],"tags":[{"name":"疫情","slug":"疫情","link":"/tags/%E7%96%AB%E6%83%85/"},{"name":"新冠","slug":"新冠","link":"/tags/%E6%96%B0%E5%86%A0/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"业务","slug":"业务","link":"/tags/%E4%B8%9A%E5%8A%A1/"},{"name":"登录","slug":"登录","link":"/tags/%E7%99%BB%E5%BD%95/"},{"name":"mybatis","slug":"mybatis","link":"/tags/mybatis/"},{"name":"框架","slug":"框架","link":"/tags/%E6%A1%86%E6%9E%B6/"}],"categories":[{"name":"日常","slug":"日常","link":"/categories/%E6%97%A5%E5%B8%B8/"},{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"算法","slug":"算法","link":"/categories/%E7%AE%97%E6%B3%95/"},{"name":"后端","slug":"后端","link":"/categories/%E5%90%8E%E7%AB%AF/"},{"name":"业务","slug":"后端/业务","link":"/categories/%E5%90%8E%E7%AB%AF/%E4%B8%9A%E5%8A%A1/"},{"name":"mybatis","slug":"后端/mybatis","link":"/categories/%E5%90%8E%E7%AB%AF/mybatis/"}],"pages":[]}